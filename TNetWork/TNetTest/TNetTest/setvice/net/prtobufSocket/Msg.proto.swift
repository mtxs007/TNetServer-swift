// Generated by the protocol buffer compiler.  DO NOT EDIT!
// Source file msg.proto

import Foundation
import ProtocolBuffers


public func == (lhs: Cmsg, rhs: Cmsg) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMsghead == rhs.hasMsghead) && (!lhs.hasMsghead || lhs.msghead == rhs.msghead)
  fieldCheck = fieldCheck && (lhs.hasMsgbody == rhs.hasMsgbody) && (!lhs.hasMsgbody || lhs.msgbody == rhs.msgbody)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: CmsgHead, rhs: CmsgHead) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasMsglen == rhs.hasMsglen) && (!lhs.hasMsglen || lhs.msglen == rhs.msglen)
  fieldCheck = fieldCheck && (lhs.hasMsgtype == rhs.hasMsgtype) && (!lhs.hasMsgtype || lhs.msgtype == rhs.msgtype)
  fieldCheck = fieldCheck && (lhs.hasMsgseq == rhs.hasMsgseq) && (!lhs.hasMsgseq || lhs.msgseq == rhs.msgseq)
  fieldCheck = fieldCheck && (lhs.hasTermversion == rhs.hasTermversion) && (!lhs.hasTermversion || lhs.termversion == rhs.termversion)
  fieldCheck = fieldCheck && (lhs.hasMsgres == rhs.hasMsgres) && (!lhs.hasMsgres || lhs.msgres == rhs.msgres)
  fieldCheck = fieldCheck && (lhs.hasTermid == rhs.hasTermid) && (!lhs.hasTermid || lhs.termid == rhs.termid)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: CmsgReg, rhs: CmsgReg) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasArea == rhs.hasArea) && (!lhs.hasArea || lhs.area == rhs.area)
  fieldCheck = fieldCheck && (lhs.hasRegion == rhs.hasRegion) && (!lhs.hasRegion || lhs.region == rhs.region)
  fieldCheck = fieldCheck && (lhs.hasShop == rhs.hasShop) && (!lhs.hasShop || lhs.shop == rhs.shop)
  fieldCheck = fieldCheck && (lhs.hasRet == rhs.hasRet) && (!lhs.hasRet || lhs.ret == rhs.ret)
  fieldCheck = fieldCheck && (lhs.hasTermid == rhs.hasTermid) && (!lhs.hasTermid || lhs.termid == rhs.termid)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: CmsgLogin, rhs: CmsgLogin) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRet == rhs.hasRet) && (!lhs.hasRet || lhs.ret == rhs.ret)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: Person, rhs: Person) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasName == rhs.hasName) && (!lhs.hasName || lhs.name == rhs.name)
  fieldCheck = fieldCheck && (lhs.hasId == rhs.hasId) && (!lhs.hasId || lhs.id == rhs.id)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public func == (lhs: CmsgLogout, rhs: CmsgLogout) -> Bool {
  if (lhs === rhs) {
    return true
  }
  var fieldCheck:Bool = (lhs.hashValue == rhs.hashValue)
  fieldCheck = fieldCheck && (lhs.hasRet == rhs.hasRet) && (!lhs.hasRet || lhs.ret == rhs.ret)
  fieldCheck = (fieldCheck && (lhs.unknownFields == rhs.unknownFields))
  return fieldCheck
}

public struct MsgRoot {
  public static var sharedInstance : MsgRoot {
   struct Static {
       static let instance : MsgRoot = MsgRoot()
   }
   return Static.instance
  }
  public var extensionRegistry:ExtensionRegistry

  init() {
    extensionRegistry = ExtensionRegistry()
    registerAllExtensions(extensionRegistry)
  }
  public func registerAllExtensions(registry:ExtensionRegistry) {
  }
}

final public class Cmsg : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var msghead:String = ""

  public private(set) var hasMsghead:Bool = false
  public private(set) var msgbody:String = ""

  public private(set) var hasMsgbody:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasMsghead {
      return false
    }
    if !hasMsgbody {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasMsghead {
      try output.writeString(1, value:msghead)
    }
    if hasMsgbody {
      try output.writeString(2, value:msgbody)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasMsghead {
      serialize_size += msghead.computeStringSize(1)
    }
    if hasMsgbody {
      serialize_size += msgbody.computeStringSize(2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Cmsg> {
    var mergedArray = Array<Cmsg>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Cmsg? {
    return try Cmsg.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> Cmsg {
    return try Cmsg.Builder().mergeFromData(data, extensionRegistry:MsgRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Cmsg {
    return try Cmsg.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> Cmsg {
    return try Cmsg.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Cmsg {
    return try Cmsg.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Cmsg {
    return try Cmsg.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Cmsg {
    return try Cmsg.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> Cmsg.Builder {
    return Cmsg.classBuilder() as! Cmsg.Builder
  }
  public func getBuilder() -> Cmsg.Builder {
    return classBuilder() as! Cmsg.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return Cmsg.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return Cmsg.Builder()
  }
  public func toBuilder() throws -> Cmsg.Builder {
    return try Cmsg.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:Cmsg) throws -> Cmsg.Builder {
    return try Cmsg.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasMsghead {
      output += "\(indent) msghead: \(msghead) \n"
    }
    if hasMsgbody {
      output += "\(indent) msgbody: \(msgbody) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasMsghead {
             hashCode = (hashCode &* 31) &+ msghead.hashValue
          }
          if hasMsgbody {
             hashCode = (hashCode &* 31) &+ msgbody.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "Cmsg"
  }
  override public func className() -> String {
      return "Cmsg"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return Cmsg.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:Cmsg = Cmsg()
    public func getMessage() -> Cmsg {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasMsghead:Bool {
         get {
              return builderResult.hasMsghead
         }
    }
    public var msghead:String {
         get {
              return builderResult.msghead
         }
         set (value) {
             builderResult.hasMsghead = true
             builderResult.msghead = value
         }
    }
    public func setMsghead(value:String) -> Cmsg.Builder {
      self.msghead = value
      return self
    }
    public func clearMsghead() -> Cmsg.Builder{
         builderResult.hasMsghead = false
         builderResult.msghead = ""
         return self
    }
    public var hasMsgbody:Bool {
         get {
              return builderResult.hasMsgbody
         }
    }
    public var msgbody:String {
         get {
              return builderResult.msgbody
         }
         set (value) {
             builderResult.hasMsgbody = true
             builderResult.msgbody = value
         }
    }
    public func setMsgbody(value:String) -> Cmsg.Builder {
      self.msgbody = value
      return self
    }
    public func clearMsgbody() -> Cmsg.Builder{
         builderResult.hasMsgbody = false
         builderResult.msgbody = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Cmsg.Builder {
      builderResult = Cmsg()
      return self
    }
    public override func clone() throws -> Cmsg.Builder {
      return try Cmsg.builderWithPrototype(builderResult)
    }
    public override func build() throws -> Cmsg {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Cmsg {
      let returnMe:Cmsg = builderResult
      return returnMe
    }
    public func mergeFrom(other:Cmsg) throws -> Cmsg.Builder {
      if other == Cmsg() {
       return self
      }
      if other.hasMsghead {
           msghead = other.msghead
      }
      if other.hasMsgbody {
           msgbody = other.msgbody
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Cmsg.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Cmsg.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          msghead = try input.readString()

        case 18 :
          msgbody = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class CmsgHead : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var msglen:Int32 = Int32(0)

  public private(set) var hasMsglen:Bool = false
  public private(set) var msgtype:Int32 = Int32(0)

  public private(set) var hasMsgtype:Bool = false
  public private(set) var msgseq:Int32 = Int32(0)

  public private(set) var hasMsgseq:Bool = false
  public private(set) var termversion:Int32 = Int32(0)

  public private(set) var hasTermversion:Bool = false
  public private(set) var msgres:Int32 = Int32(0)

  public private(set) var hasMsgres:Bool = false
  public private(set) var termid:String = ""

  public private(set) var hasTermid:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasMsglen {
      return false
    }
    if !hasMsgtype {
      return false
    }
    if !hasMsgseq {
      return false
    }
    if !hasTermversion {
      return false
    }
    if !hasMsgres {
      return false
    }
    if !hasTermid {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasMsglen {
      try output.writeInt32(1, value:msglen)
    }
    if hasMsgtype {
      try output.writeInt32(2, value:msgtype)
    }
    if hasMsgseq {
      try output.writeInt32(3, value:msgseq)
    }
    if hasTermversion {
      try output.writeInt32(4, value:termversion)
    }
    if hasMsgres {
      try output.writeInt32(5, value:msgres)
    }
    if hasTermid {
      try output.writeString(6, value:termid)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasMsglen {
      serialize_size += msglen.computeInt32Size(1)
    }
    if hasMsgtype {
      serialize_size += msgtype.computeInt32Size(2)
    }
    if hasMsgseq {
      serialize_size += msgseq.computeInt32Size(3)
    }
    if hasTermversion {
      serialize_size += termversion.computeInt32Size(4)
    }
    if hasMsgres {
      serialize_size += msgres.computeInt32Size(5)
    }
    if hasTermid {
      serialize_size += termid.computeStringSize(6)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<CmsgHead> {
    var mergedArray = Array<CmsgHead>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> CmsgHead? {
    return try CmsgHead.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> CmsgHead {
    return try CmsgHead.Builder().mergeFromData(data, extensionRegistry:MsgRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> CmsgHead {
    return try CmsgHead.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> CmsgHead {
    return try CmsgHead.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> CmsgHead {
    return try CmsgHead.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> CmsgHead {
    return try CmsgHead.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> CmsgHead {
    return try CmsgHead.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> CmsgHead.Builder {
    return CmsgHead.classBuilder() as! CmsgHead.Builder
  }
  public func getBuilder() -> CmsgHead.Builder {
    return classBuilder() as! CmsgHead.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return CmsgHead.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return CmsgHead.Builder()
  }
  public func toBuilder() throws -> CmsgHead.Builder {
    return try CmsgHead.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:CmsgHead) throws -> CmsgHead.Builder {
    return try CmsgHead.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasMsglen {
      output += "\(indent) msglen: \(msglen) \n"
    }
    if hasMsgtype {
      output += "\(indent) msgtype: \(msgtype) \n"
    }
    if hasMsgseq {
      output += "\(indent) msgseq: \(msgseq) \n"
    }
    if hasTermversion {
      output += "\(indent) termversion: \(termversion) \n"
    }
    if hasMsgres {
      output += "\(indent) msgres: \(msgres) \n"
    }
    if hasTermid {
      output += "\(indent) termid: \(termid) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasMsglen {
             hashCode = (hashCode &* 31) &+ msglen.hashValue
          }
          if hasMsgtype {
             hashCode = (hashCode &* 31) &+ msgtype.hashValue
          }
          if hasMsgseq {
             hashCode = (hashCode &* 31) &+ msgseq.hashValue
          }
          if hasTermversion {
             hashCode = (hashCode &* 31) &+ termversion.hashValue
          }
          if hasMsgres {
             hashCode = (hashCode &* 31) &+ msgres.hashValue
          }
          if hasTermid {
             hashCode = (hashCode &* 31) &+ termid.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "CmsgHead"
  }
  override public func className() -> String {
      return "CmsgHead"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return CmsgHead.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:CmsgHead = CmsgHead()
    public func getMessage() -> CmsgHead {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasMsglen:Bool {
         get {
              return builderResult.hasMsglen
         }
    }
    public var msglen:Int32 {
         get {
              return builderResult.msglen
         }
         set (value) {
             builderResult.hasMsglen = true
             builderResult.msglen = value
         }
    }
    public func setMsglen(value:Int32) -> CmsgHead.Builder {
      self.msglen = value
      return self
    }
    public func clearMsglen() -> CmsgHead.Builder{
         builderResult.hasMsglen = false
         builderResult.msglen = Int32(0)
         return self
    }
    public var hasMsgtype:Bool {
         get {
              return builderResult.hasMsgtype
         }
    }
    public var msgtype:Int32 {
         get {
              return builderResult.msgtype
         }
         set (value) {
             builderResult.hasMsgtype = true
             builderResult.msgtype = value
         }
    }
    public func setMsgtype(value:Int32) -> CmsgHead.Builder {
      self.msgtype = value
      return self
    }
    public func clearMsgtype() -> CmsgHead.Builder{
         builderResult.hasMsgtype = false
         builderResult.msgtype = Int32(0)
         return self
    }
    public var hasMsgseq:Bool {
         get {
              return builderResult.hasMsgseq
         }
    }
    public var msgseq:Int32 {
         get {
              return builderResult.msgseq
         }
         set (value) {
             builderResult.hasMsgseq = true
             builderResult.msgseq = value
         }
    }
    public func setMsgseq(value:Int32) -> CmsgHead.Builder {
      self.msgseq = value
      return self
    }
    public func clearMsgseq() -> CmsgHead.Builder{
         builderResult.hasMsgseq = false
         builderResult.msgseq = Int32(0)
         return self
    }
    public var hasTermversion:Bool {
         get {
              return builderResult.hasTermversion
         }
    }
    public var termversion:Int32 {
         get {
              return builderResult.termversion
         }
         set (value) {
             builderResult.hasTermversion = true
             builderResult.termversion = value
         }
    }
    public func setTermversion(value:Int32) -> CmsgHead.Builder {
      self.termversion = value
      return self
    }
    public func clearTermversion() -> CmsgHead.Builder{
         builderResult.hasTermversion = false
         builderResult.termversion = Int32(0)
         return self
    }
    public var hasMsgres:Bool {
         get {
              return builderResult.hasMsgres
         }
    }
    public var msgres:Int32 {
         get {
              return builderResult.msgres
         }
         set (value) {
             builderResult.hasMsgres = true
             builderResult.msgres = value
         }
    }
    public func setMsgres(value:Int32) -> CmsgHead.Builder {
      self.msgres = value
      return self
    }
    public func clearMsgres() -> CmsgHead.Builder{
         builderResult.hasMsgres = false
         builderResult.msgres = Int32(0)
         return self
    }
    public var hasTermid:Bool {
         get {
              return builderResult.hasTermid
         }
    }
    public var termid:String {
         get {
              return builderResult.termid
         }
         set (value) {
             builderResult.hasTermid = true
             builderResult.termid = value
         }
    }
    public func setTermid(value:String) -> CmsgHead.Builder {
      self.termid = value
      return self
    }
    public func clearTermid() -> CmsgHead.Builder{
         builderResult.hasTermid = false
         builderResult.termid = ""
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> CmsgHead.Builder {
      builderResult = CmsgHead()
      return self
    }
    public override func clone() throws -> CmsgHead.Builder {
      return try CmsgHead.builderWithPrototype(builderResult)
    }
    public override func build() throws -> CmsgHead {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> CmsgHead {
      let returnMe:CmsgHead = builderResult
      return returnMe
    }
    public func mergeFrom(other:CmsgHead) throws -> CmsgHead.Builder {
      if other == CmsgHead() {
       return self
      }
      if other.hasMsglen {
           msglen = other.msglen
      }
      if other.hasMsgtype {
           msgtype = other.msgtype
      }
      if other.hasMsgseq {
           msgseq = other.msgseq
      }
      if other.hasTermversion {
           termversion = other.termversion
      }
      if other.hasMsgres {
           msgres = other.msgres
      }
      if other.hasTermid {
           termid = other.termid
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> CmsgHead.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> CmsgHead.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          msglen = try input.readInt32()

        case 16 :
          msgtype = try input.readInt32()

        case 24 :
          msgseq = try input.readInt32()

        case 32 :
          termversion = try input.readInt32()

        case 40 :
          msgres = try input.readInt32()

        case 50 :
          termid = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class CmsgReg : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var area:Int32 = Int32(0)

  public private(set) var hasArea:Bool = false
  public private(set) var region:Int32 = Int32(0)

  public private(set) var hasRegion:Bool = false
  public private(set) var shop:Int32 = Int32(0)

  public private(set) var hasShop:Bool = false
  public private(set) var ret:Int32 = Int32(0)

  public private(set) var hasRet:Bool = false
  public private(set) var termid:String = "12345"

  public private(set) var hasTermid:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasArea {
      try output.writeInt32(1, value:area)
    }
    if hasRegion {
      try output.writeInt32(2, value:region)
    }
    if hasShop {
      try output.writeInt32(3, value:shop)
    }
    if hasRet {
      try output.writeInt32(4, value:ret)
    }
    if hasTermid {
      try output.writeString(5, value:termid)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasArea {
      serialize_size += area.computeInt32Size(1)
    }
    if hasRegion {
      serialize_size += region.computeInt32Size(2)
    }
    if hasShop {
      serialize_size += shop.computeInt32Size(3)
    }
    if hasRet {
      serialize_size += ret.computeInt32Size(4)
    }
    if hasTermid {
      serialize_size += termid.computeStringSize(5)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<CmsgReg> {
    var mergedArray = Array<CmsgReg>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> CmsgReg? {
    return try CmsgReg.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> CmsgReg {
    return try CmsgReg.Builder().mergeFromData(data, extensionRegistry:MsgRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> CmsgReg {
    return try CmsgReg.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> CmsgReg {
    return try CmsgReg.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> CmsgReg {
    return try CmsgReg.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> CmsgReg {
    return try CmsgReg.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> CmsgReg {
    return try CmsgReg.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> CmsgReg.Builder {
    return CmsgReg.classBuilder() as! CmsgReg.Builder
  }
  public func getBuilder() -> CmsgReg.Builder {
    return classBuilder() as! CmsgReg.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return CmsgReg.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return CmsgReg.Builder()
  }
  public func toBuilder() throws -> CmsgReg.Builder {
    return try CmsgReg.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:CmsgReg) throws -> CmsgReg.Builder {
    return try CmsgReg.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasArea {
      output += "\(indent) area: \(area) \n"
    }
    if hasRegion {
      output += "\(indent) region: \(region) \n"
    }
    if hasShop {
      output += "\(indent) shop: \(shop) \n"
    }
    if hasRet {
      output += "\(indent) ret: \(ret) \n"
    }
    if hasTermid {
      output += "\(indent) termid: \(termid) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasArea {
             hashCode = (hashCode &* 31) &+ area.hashValue
          }
          if hasRegion {
             hashCode = (hashCode &* 31) &+ region.hashValue
          }
          if hasShop {
             hashCode = (hashCode &* 31) &+ shop.hashValue
          }
          if hasRet {
             hashCode = (hashCode &* 31) &+ ret.hashValue
          }
          if hasTermid {
             hashCode = (hashCode &* 31) &+ termid.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "CmsgReg"
  }
  override public func className() -> String {
      return "CmsgReg"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return CmsgReg.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:CmsgReg = CmsgReg()
    public func getMessage() -> CmsgReg {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasArea:Bool {
         get {
              return builderResult.hasArea
         }
    }
    public var area:Int32 {
         get {
              return builderResult.area
         }
         set (value) {
             builderResult.hasArea = true
             builderResult.area = value
         }
    }
    public func setArea(value:Int32) -> CmsgReg.Builder {
      self.area = value
      return self
    }
    public func clearArea() -> CmsgReg.Builder{
         builderResult.hasArea = false
         builderResult.area = Int32(0)
         return self
    }
    public var hasRegion:Bool {
         get {
              return builderResult.hasRegion
         }
    }
    public var region:Int32 {
         get {
              return builderResult.region
         }
         set (value) {
             builderResult.hasRegion = true
             builderResult.region = value
         }
    }
    public func setRegion(value:Int32) -> CmsgReg.Builder {
      self.region = value
      return self
    }
    public func clearRegion() -> CmsgReg.Builder{
         builderResult.hasRegion = false
         builderResult.region = Int32(0)
         return self
    }
    public var hasShop:Bool {
         get {
              return builderResult.hasShop
         }
    }
    public var shop:Int32 {
         get {
              return builderResult.shop
         }
         set (value) {
             builderResult.hasShop = true
             builderResult.shop = value
         }
    }
    public func setShop(value:Int32) -> CmsgReg.Builder {
      self.shop = value
      return self
    }
    public func clearShop() -> CmsgReg.Builder{
         builderResult.hasShop = false
         builderResult.shop = Int32(0)
         return self
    }
    public var hasRet:Bool {
         get {
              return builderResult.hasRet
         }
    }
    public var ret:Int32 {
         get {
              return builderResult.ret
         }
         set (value) {
             builderResult.hasRet = true
             builderResult.ret = value
         }
    }
    public func setRet(value:Int32) -> CmsgReg.Builder {
      self.ret = value
      return self
    }
    public func clearRet() -> CmsgReg.Builder{
         builderResult.hasRet = false
         builderResult.ret = Int32(0)
         return self
    }
    public var hasTermid:Bool {
         get {
              return builderResult.hasTermid
         }
    }
    public var termid:String {
         get {
              return builderResult.termid
         }
         set (value) {
             builderResult.hasTermid = true
             builderResult.termid = value
         }
    }
    public func setTermid(value:String) -> CmsgReg.Builder {
      self.termid = value
      return self
    }
    public func clearTermid() -> CmsgReg.Builder{
         builderResult.hasTermid = false
         builderResult.termid = "12345"
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> CmsgReg.Builder {
      builderResult = CmsgReg()
      return self
    }
    public override func clone() throws -> CmsgReg.Builder {
      return try CmsgReg.builderWithPrototype(builderResult)
    }
    public override func build() throws -> CmsgReg {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> CmsgReg {
      let returnMe:CmsgReg = builderResult
      return returnMe
    }
    public func mergeFrom(other:CmsgReg) throws -> CmsgReg.Builder {
      if other == CmsgReg() {
       return self
      }
      if other.hasArea {
           area = other.area
      }
      if other.hasRegion {
           region = other.region
      }
      if other.hasShop {
           shop = other.shop
      }
      if other.hasRet {
           ret = other.ret
      }
      if other.hasTermid {
           termid = other.termid
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> CmsgReg.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> CmsgReg.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          area = try input.readInt32()

        case 16 :
          region = try input.readInt32()

        case 24 :
          shop = try input.readInt32()

        case 32 :
          ret = try input.readInt32()

        case 42 :
          termid = try input.readString()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class CmsgLogin : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var ret:Int32 = Int32(0)

  public private(set) var hasRet:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasRet {
      try output.writeInt32(1, value:ret)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasRet {
      serialize_size += ret.computeInt32Size(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<CmsgLogin> {
    var mergedArray = Array<CmsgLogin>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> CmsgLogin? {
    return try CmsgLogin.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> CmsgLogin {
    return try CmsgLogin.Builder().mergeFromData(data, extensionRegistry:MsgRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> CmsgLogin {
    return try CmsgLogin.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> CmsgLogin {
    return try CmsgLogin.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> CmsgLogin {
    return try CmsgLogin.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> CmsgLogin {
    return try CmsgLogin.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> CmsgLogin {
    return try CmsgLogin.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> CmsgLogin.Builder {
    return CmsgLogin.classBuilder() as! CmsgLogin.Builder
  }
  public func getBuilder() -> CmsgLogin.Builder {
    return classBuilder() as! CmsgLogin.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return CmsgLogin.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return CmsgLogin.Builder()
  }
  public func toBuilder() throws -> CmsgLogin.Builder {
    return try CmsgLogin.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:CmsgLogin) throws -> CmsgLogin.Builder {
    return try CmsgLogin.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasRet {
      output += "\(indent) ret: \(ret) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasRet {
             hashCode = (hashCode &* 31) &+ ret.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "CmsgLogin"
  }
  override public func className() -> String {
      return "CmsgLogin"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return CmsgLogin.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:CmsgLogin = CmsgLogin()
    public func getMessage() -> CmsgLogin {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasRet:Bool {
         get {
              return builderResult.hasRet
         }
    }
    public var ret:Int32 {
         get {
              return builderResult.ret
         }
         set (value) {
             builderResult.hasRet = true
             builderResult.ret = value
         }
    }
    public func setRet(value:Int32) -> CmsgLogin.Builder {
      self.ret = value
      return self
    }
    public func clearRet() -> CmsgLogin.Builder{
         builderResult.hasRet = false
         builderResult.ret = Int32(0)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> CmsgLogin.Builder {
      builderResult = CmsgLogin()
      return self
    }
    public override func clone() throws -> CmsgLogin.Builder {
      return try CmsgLogin.builderWithPrototype(builderResult)
    }
    public override func build() throws -> CmsgLogin {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> CmsgLogin {
      let returnMe:CmsgLogin = builderResult
      return returnMe
    }
    public func mergeFrom(other:CmsgLogin) throws -> CmsgLogin.Builder {
      if other == CmsgLogin() {
       return self
      }
      if other.hasRet {
           ret = other.ret
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> CmsgLogin.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> CmsgLogin.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          ret = try input.readInt32()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class Person : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var name:String = ""

  public private(set) var hasName:Bool = false
  public private(set) var id:Int32 = Int32(0)

  public private(set) var hasId:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
    if !hasName {
      return false
    }
    if !hasId {
      return false
    }
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasName {
      try output.writeString(1, value:name)
    }
    if hasId {
      try output.writeInt32(2, value:id)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasName {
      serialize_size += name.computeStringSize(1)
    }
    if hasId {
      serialize_size += id.computeInt32Size(2)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<Person> {
    var mergedArray = Array<Person>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> Person? {
    return try Person.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> Person {
    return try Person.Builder().mergeFromData(data, extensionRegistry:MsgRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> Person {
    return try Person.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> Person {
    return try Person.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> Person {
    return try Person.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> Person {
    return try Person.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Person {
    return try Person.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> Person.Builder {
    return Person.classBuilder() as! Person.Builder
  }
  public func getBuilder() -> Person.Builder {
    return classBuilder() as! Person.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return Person.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return Person.Builder()
  }
  public func toBuilder() throws -> Person.Builder {
    return try Person.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:Person) throws -> Person.Builder {
    return try Person.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasName {
      output += "\(indent) name: \(name) \n"
    }
    if hasId {
      output += "\(indent) id: \(id) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasName {
             hashCode = (hashCode &* 31) &+ name.hashValue
          }
          if hasId {
             hashCode = (hashCode &* 31) &+ id.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "Person"
  }
  override public func className() -> String {
      return "Person"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return Person.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:Person = Person()
    public func getMessage() -> Person {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasName:Bool {
         get {
              return builderResult.hasName
         }
    }
    public var name:String {
         get {
              return builderResult.name
         }
         set (value) {
             builderResult.hasName = true
             builderResult.name = value
         }
    }
    public func setName(value:String) -> Person.Builder {
      self.name = value
      return self
    }
    public func clearName() -> Person.Builder{
         builderResult.hasName = false
         builderResult.name = ""
         return self
    }
    public var hasId:Bool {
         get {
              return builderResult.hasId
         }
    }
    public var id:Int32 {
         get {
              return builderResult.id
         }
         set (value) {
             builderResult.hasId = true
             builderResult.id = value
         }
    }
    public func setId(value:Int32) -> Person.Builder {
      self.id = value
      return self
    }
    public func clearId() -> Person.Builder{
         builderResult.hasId = false
         builderResult.id = Int32(0)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> Person.Builder {
      builderResult = Person()
      return self
    }
    public override func clone() throws -> Person.Builder {
      return try Person.builderWithPrototype(builderResult)
    }
    public override func build() throws -> Person {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> Person {
      let returnMe:Person = builderResult
      return returnMe
    }
    public func mergeFrom(other:Person) throws -> Person.Builder {
      if other == Person() {
       return self
      }
      if other.hasName {
           name = other.name
      }
      if other.hasId {
           id = other.id
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> Person.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> Person.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 10 :
          name = try input.readString()

        case 16 :
          id = try input.readInt32()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}

final public class CmsgLogout : GeneratedMessage, GeneratedMessageProtocol {
  public private(set) var ret:Int32 = Int32(0)

  public private(set) var hasRet:Bool = false
  required public init() {
       super.init()
  }
  override public func isInitialized() -> Bool {
   return true
  }
  override public func writeToCodedOutputStream(output:CodedOutputStream) throws {
    if hasRet {
      try output.writeInt32(1, value:ret)
    }
    try unknownFields.writeToCodedOutputStream(output)
  }
  override public func serializedSize() -> Int32 {
    var serialize_size:Int32 = memoizedSerializedSize
    if serialize_size != -1 {
     return serialize_size
    }

    serialize_size = 0
    if hasRet {
      serialize_size += ret.computeInt32Size(1)
    }
    serialize_size += unknownFields.serializedSize()
    memoizedSerializedSize = serialize_size
    return serialize_size
  }
  public class func parseArrayDelimitedFromInputStream(input:NSInputStream) throws -> Array<CmsgLogout> {
    var mergedArray = Array<CmsgLogout>()
    while let value = try parseFromDelimitedFromInputStream(input) {
      mergedArray += [value]
    }
    return mergedArray
  }
  public class func parseFromDelimitedFromInputStream(input:NSInputStream) throws -> CmsgLogout? {
    return try CmsgLogout.Builder().mergeDelimitedFromInputStream(input)?.build()
  }
  public class func parseFromData(data:NSData) throws -> CmsgLogout {
    return try CmsgLogout.Builder().mergeFromData(data, extensionRegistry:MsgRoot.sharedInstance.extensionRegistry).build()
  }
  public class func parseFromData(data:NSData, extensionRegistry:ExtensionRegistry) throws -> CmsgLogout {
    return try CmsgLogout.Builder().mergeFromData(data, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromInputStream(input:NSInputStream) throws -> CmsgLogout {
    return try CmsgLogout.Builder().mergeFromInputStream(input).build()
  }
  public class func parseFromInputStream(input:NSInputStream, extensionRegistry:ExtensionRegistry) throws -> CmsgLogout {
    return try CmsgLogout.Builder().mergeFromInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream) throws -> CmsgLogout {
    return try CmsgLogout.Builder().mergeFromCodedInputStream(input).build()
  }
  public class func parseFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> CmsgLogout {
    return try CmsgLogout.Builder().mergeFromCodedInputStream(input, extensionRegistry:extensionRegistry).build()
  }
  public class func getBuilder() -> CmsgLogout.Builder {
    return CmsgLogout.classBuilder() as! CmsgLogout.Builder
  }
  public func getBuilder() -> CmsgLogout.Builder {
    return classBuilder() as! CmsgLogout.Builder
  }
  public override class func classBuilder() -> MessageBuilder {
    return CmsgLogout.Builder()
  }
  public override func classBuilder() -> MessageBuilder {
    return CmsgLogout.Builder()
  }
  public func toBuilder() throws -> CmsgLogout.Builder {
    return try CmsgLogout.builderWithPrototype(self)
  }
  public class func builderWithPrototype(prototype:CmsgLogout) throws -> CmsgLogout.Builder {
    return try CmsgLogout.Builder().mergeFrom(prototype)
  }
  override public func getDescription(indent:String) throws -> String {
    var output:String = ""
    if hasRet {
      output += "\(indent) ret: \(ret) \n"
    }
    output += unknownFields.getDescription(indent)
    return output
  }
  override public var hashValue:Int {
      get {
          var hashCode:Int = 7
          if hasRet {
             hashCode = (hashCode &* 31) &+ ret.hashValue
          }
          hashCode = (hashCode &* 31) &+  unknownFields.hashValue
          return hashCode
      }
  }


  //Meta information declaration start

  override public class func className() -> String {
      return "CmsgLogout"
  }
  override public func className() -> String {
      return "CmsgLogout"
  }
  override public func classMetaType() -> GeneratedMessage.Type {
      return CmsgLogout.self
  }
  //Meta information declaration end

  final public class Builder : GeneratedMessageBuilder {
    private var builderResult:CmsgLogout = CmsgLogout()
    public func getMessage() -> CmsgLogout {
        return builderResult
    }

    required override public init () {
       super.init()
    }
    public var hasRet:Bool {
         get {
              return builderResult.hasRet
         }
    }
    public var ret:Int32 {
         get {
              return builderResult.ret
         }
         set (value) {
             builderResult.hasRet = true
             builderResult.ret = value
         }
    }
    public func setRet(value:Int32) -> CmsgLogout.Builder {
      self.ret = value
      return self
    }
    public func clearRet() -> CmsgLogout.Builder{
         builderResult.hasRet = false
         builderResult.ret = Int32(0)
         return self
    }
    override public var internalGetResult:GeneratedMessage {
         get {
            return builderResult
         }
    }
    public override func clear() -> CmsgLogout.Builder {
      builderResult = CmsgLogout()
      return self
    }
    public override func clone() throws -> CmsgLogout.Builder {
      return try CmsgLogout.builderWithPrototype(builderResult)
    }
    public override func build() throws -> CmsgLogout {
         try checkInitialized()
         return buildPartial()
    }
    public func buildPartial() -> CmsgLogout {
      let returnMe:CmsgLogout = builderResult
      return returnMe
    }
    public func mergeFrom(other:CmsgLogout) throws -> CmsgLogout.Builder {
      if other == CmsgLogout() {
       return self
      }
      if other.hasRet {
           ret = other.ret
      }
      try mergeUnknownFields(other.unknownFields)
      return self
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream) throws -> CmsgLogout.Builder {
         return try mergeFromCodedInputStream(input, extensionRegistry:ExtensionRegistry())
    }
    public override func mergeFromCodedInputStream(input:CodedInputStream, extensionRegistry:ExtensionRegistry) throws -> CmsgLogout.Builder {
      let unknownFieldsBuilder:UnknownFieldSet.Builder = try UnknownFieldSet.builderWithUnknownFields(self.unknownFields)
      while (true) {
        let protobufTag = try input.readTag()
        switch protobufTag {
        case 0: 
          self.unknownFields = try unknownFieldsBuilder.build()
          return self

        case 8 :
          ret = try input.readInt32()

        default:
          if (!(try parseUnknownField(input,unknownFields:unknownFieldsBuilder, extensionRegistry:extensionRegistry, tag:protobufTag))) {
             unknownFields = try unknownFieldsBuilder.build()
             return self
          }
        }
      }
    }
  }

}


// @@protoc_insertion_point(global_scope)
